#[cfg(test)]
pub(crate) mod tests {
    use halo2_proofs::arithmetic::CurveAffine;
    use halo2_proofs::pairing::bn256::{G1Affine, G2Affine, Fq2, pairing};
    use super::super::bn_to_field;
    use num_bigint::BigUint;
    //use core::ops::Add;
    use std::str::FromStr;
        fn get_g1(a: Vec<&str>) -> G1Affine {
            G1Affine::from_xy(
                bn_to_field(&BigUint::from_str(a[0]).unwrap()),
                bn_to_field(&BigUint::from_str(a[1]).unwrap()),
            ).unwrap()
        }
        fn get_g2(b: Vec<&str>) -> G2Affine {
            G2Affine::from_xy(
                Fq2 {
                    c0: bn_to_field(&BigUint::from_str(b[0]).unwrap()),
                    c1: bn_to_field(&BigUint::from_str(b[1]).unwrap()),
                },
                Fq2 {
                    c0: bn_to_field(&BigUint::from_str(b[2]).unwrap()),
                    c1: bn_to_field(&BigUint::from_str(b[3]).unwrap()),
                }
            ).unwrap()
        }
 
        #[test]
        fn test_bn254_add() {

        let x = get_g1(vec![
            "11374933784481898583367503420546349347921686681304441661567497326629776056309",
            "5039612884785796428364890828411823498920067180913949386530820955328247505500",
        ]);

        let y = get_g1(vec![
            "6346696605408467183253691272432638422411966063101221796219900165046456247801",
            "16021838921913636763711766864306630139800454605152352295402262906962367559814",
        ]);

        let z:G1Affine = (x + y).into();
        println!("msm {:?}", z);

        let a = get_g1(vec![
            "11642537973992842197841129792593344678309686386610379404309438937881134387046",
            "16038677464958343056835043065894747361239845934514535107990003321228770537757",
        ]);

        let b = get_g2(vec![
            "47825847124631411811576281994805528104052872047575749583058110663112377001",
            "8744222678452503383790834725135834161307861625945158048012780534319795560143",
            "9233346029650632520218739027049068980416615687382718198119931453101152827975",
            "10471280343341576477249226516274439500456322467064958156008066650244635888622"
        ]);

        let pair_ab = pairing(&a, &b);
        println!("\npair ab {:?}", pair_ab);

      
        let c = get_g1(vec![
            "5031514285120295997737123508423040879712685050138383293760355384665904754488",
            "6823067879265550319809102199938618241998853703030415114792371967260649452853",
        ]);

        let alpha = get_g1(vec![
            "16757480011835372184764354633328853212064194417052169636997013717174005603641",
            "12432097195700978348921464455579756029074596339242363943410459715706216986941",
        ]);
        
        let beta = get_g2(vec![
            "17975028126161125746872310568788265990276646416597355097039940884195819358739",
            "17401920800019416240372951523628528842571722962428319020407322407751134153696",
            "373336161763481738310767706475057352757645836211335436601460549560077507883",
            "12596258404235599838080822038113194794755190435330940888082608644071169093526"
        ]);
        let pair_alphabeta = pairing(&alpha, &beta);
        
        let gamma = get_g2(vec![
            "10857046999023057135944570762232829481370756359578518086990519993285655852781",
            "11559732032986387107991004021392285783925812861821192530917403151452391805634",
            "8495653923123431417604973247489272438418190587263600148770280649306958101930",
            "4082367875863433681332203403145435568316851327593401208105741076214120093531"
        ]);

        let pair_gamma = pairing(&z, &gamma);
        println!("\ng1 {:?}", z);
        println!("g2 {:?}", gamma);
        println!("pair gamma {:?}", pair_gamma);
        println!("pair gamma + ab {:?}", pair_ab +  pair_gamma);
        
        let delta = get_g2(vec![
            "3257864888291421116173460527534170713717410433509021668023378246238733003616",
            "19501533296056540312008038527562968311092778436941336050675464372460956461923",
            "6694920137971073977116331836462792254111247710837228432923435849982682441494",
            "17519709022773002523554480652241560921521540950810125413580329045084856923004"
        ]);

        let pair_delta = pairing(&c, &delta);
        println!("\npair gamma + ab + delta {:?}", pair_ab +  pair_gamma + pair_delta);
        //println!("\npair sum {:?}", pair_ab +  pair_gamma + pair_delta - pair_alphabeta);
        println!("\npair alpha beta {:?}", pair_alphabeta);
    }
}
